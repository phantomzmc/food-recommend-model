import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler


class FoodDataset:
    def __init__(self, foods_path=None, ratings_path=None):
        print("üì¶ Initializing FoodDataset...")
        self.foods_df = None
        self.ratings_df = None
        self.load_data(foods_path, ratings_path)

    def load_data(self, foods_path=None, ratings_path=None):
        print("üì• Loading data...")
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô"""
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        if foods_path:
            self.foods_df = pd.read_csv(foods_path)
        else:
            self.create_simple_foods()

        if ratings_path:
            self.ratings_df = pd.read_csv(ratings_path)
        else:
            self._create_sample_ratings()

    def create_simple_foods(self):
        print("üçΩÔ∏è Creating sample food data...")
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á"""
        # ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á

        foods_data = {
            'food_id': range(1, 21),
            'name': [
                '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î', '‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢', '‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á', '‡∏™‡πâ‡∏°‡∏ï‡∏≥', '‡πÅ‡∏Å‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏ß‡∏≤‡∏ô',
                '‡∏ú‡∏±‡∏î‡∏Å‡∏£‡∏∞‡πÄ‡∏û‡∏£‡∏≤', '‡∏Ç‡πâ‡∏≤‡∏ß‡∏°‡∏±‡∏ô‡πÑ‡∏Å‡πà', '‡∏Å‡πã‡∏ß‡∏¢‡πÄ‡∏ï‡∏µ‡πã‡∏¢‡∏ß‡πÄ‡∏£‡∏∑‡∏≠', '‡∏´‡∏°‡∏π‡∏ó‡∏≠‡∏î‡∏Å‡∏£‡∏∞‡πÄ‡∏ó‡∏µ‡∏¢‡∏°', '‡∏Ç‡πâ‡∏≤‡∏ß‡∏´‡∏°‡∏π‡∏Å‡∏£‡∏∞‡πÄ‡∏ó‡∏µ‡∏¢‡∏°',
                '‡πÅ‡∏Å‡∏á‡∏°‡∏±‡∏™‡∏°‡∏±‡πà‡∏ô', '‡πÅ‡∏Å‡∏á‡∏™‡πâ‡∏°', '‡∏Ç‡πâ‡∏≤‡∏ß‡∏Ñ‡∏•‡∏∏‡∏Å‡∏Å‡∏∞‡∏õ‡∏¥', '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ï‡πâ‡∏°‡∏õ‡∏•‡∏≤', '‡∏ú‡∏±‡∏î‡∏ã‡∏µ‡∏≠‡∏¥‡πä‡∏ß',
                '‡∏Ç‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏î', '‡πÑ‡∏Å‡πà‡∏ó‡∏≠‡∏î', '‡∏Å‡∏∞‡πÄ‡∏û‡∏£‡∏≤‡πÑ‡∏Å‡πà‡πÑ‡∏Ç‡πà‡∏î‡∏≤‡∏ß', '‡∏ö‡∏∞‡∏´‡∏°‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πä‡∏¢‡∏ß', '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏õ‡∏π'
            ],
            'spicy_level': [2, 3, 5, 5, 4, 1, 5, 4, 3, 2, 2, 1, 2, 1, 3, 1, 2, 3, 4, 3],
            'sweet_level': [2, 3, 2, 2, 3, 2, 1, 1, 4, 2, 1, 2, 2, 1, 2, 1, 2, 2, 3, 2],
            'salt_level': [3, 4, 4, 4, 3, 2, 3, 4, 3, 3, 3, 2, 3, 2, 4, 2, 3, 3, 4, 3],
            'price': [50, 60, 120, 40, 80, 50, 60, 70, 100, 60, 70, 60, 80, 40, 120, 40, 50, 90, 70, 60],
            'cooking_time': [10, 15, 25, 10, 30, 20, 10, 20, 40, 15, 15, 25, 20, 5, 30, 15, 20, 25, 15, 25],
            'category': [
                '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß', '‡πÅ‡∏Å‡∏á', '‡∏¢‡∏≥', '‡πÅ‡∏Å‡∏á',
                '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß',
                '‡πÅ‡∏Å‡∏á', '‡πÅ‡∏Å‡∏á', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß',
                '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡∏î‡πà‡∏ß‡∏ô', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡∏î‡πà‡∏ß‡∏ô', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß'
            ],
            'meal_time': [  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£
                '‡∏°‡∏∑‡πâ‡∏≠‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô,‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡πá‡∏ô', '‡∏°‡∏∑‡πâ‡∏≠‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô,‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡πá‡∏ô', '‡∏°‡∏∑‡πâ‡∏≠‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô,‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡πá‡∏ô', '‡∏°‡∏∑‡πâ‡∏≠‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô,‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡πá‡∏ô',
                '‡∏°‡∏∑‡πâ‡∏≠‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô,‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡πá‡∏ô',
                '‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏ä‡πâ‡∏≤,‡∏°‡∏∑‡πâ‡∏≠‡∏Ñ‡πà‡∏≥', '‡∏°‡∏∑‡πâ‡∏≠‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô,‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡πá‡∏ô', '‡∏°‡∏∑‡πâ‡∏≠‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô,‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡πá‡∏ô', '‡∏°‡∏∑‡πâ‡∏≠‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô,‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡πá‡∏ô',
                '‡∏°‡∏∑‡πâ‡∏≠‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô,‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡πá‡∏ô',
                '‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏ä‡πâ‡∏≤', '‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏ä‡πâ‡∏≤,‡∏°‡∏∑‡πâ‡∏≠‡∏Ñ‡πà‡∏≥', '‡∏°‡∏∑‡πâ‡∏≠‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô,‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡πá‡∏ô', '‡∏°‡∏∑‡πâ‡∏≠‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô,‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡πá‡∏ô', '‡∏°‡∏∑‡πâ‡∏≠‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô,‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡πá‡∏ô',
                '‡∏°‡∏∑‡πâ‡∏≠‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô', '‡∏°‡∏∑‡πâ‡∏≠‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô,‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡πá‡∏ô', '‡∏°‡∏∑‡πâ‡∏≠‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô,‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡πá‡∏ô', '‡∏°‡∏∑‡πâ‡∏≠‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô,‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡πá‡∏ô',
                '‡∏°‡∏∑‡πâ‡∏≠‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô,‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡πá‡∏ô'
            ]
        }
        self.foods_df = pd.DataFrame(foods_data)

    def _create_sample_ratings(self):
        print("‚≠ê Creating sample ratings data...")
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á"""
        ratings_data = {
            'user_id': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            'food_id': [1, 3, 5, 7, 9, 11, 13, 15, 17, 19],
            'rating': [5, 3, 4, 5, 3, 2, 4, 3, 2, 4]
        }
        self.ratings_df = pd.DataFrame(ratings_data)

    def get_food_features(self, features):
        """‡∏î‡∏∂‡∏á‡∏Ñ‡∏∏‡∏ì‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Ñ‡∏•‡∏∂‡∏á"""
        # Normalize ‡∏Ñ‡∏∏‡∏ì‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞
        scaler = MinMaxScaler()
        return scaler.fit_transform(self.foods_df[features])

    def get_user_ratings(self, user_id):
        """‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
        if self.ratings_df is None:
            return pd.DataFrame()
        return self.ratings_df[self.ratings_df['user_id'] == user_id]

    def get_all_food_ids(self):
        """‡∏î‡∏∂‡∏á‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        return self.foods_df['food_id'].values

    def get_index_for_food_id(self, food_id):
        """‡∏î‡∏∂‡∏á‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏Å food_id"""
        return self.foods_df[self.foods_df['food_id'] == food_id].index[0]

    def get_food_details(self, food_ids):
        print(f"üî• get food detail")
        """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏£‡∏´‡∏±‡∏™"""
        result = []

        # ‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        print(f"Food IDs: {food_ids}")
        print(f"Available food_ids in DataFrame: {self.foods_df['food_id'].unique()}")

        for food_id in food_ids:
            # ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á food_id ‡πÄ‡∏õ‡πá‡∏ô int (‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÉ‡∏ôDataFrame)
            try:
                food_id = int(food_id)  # ‡∏´‡∏£‡∏∑‡∏≠ str(food_id) ‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô DataFrame
            except:
                pass

            print(food_id)
            food = self.foods_df[self.foods_df['food_id'] == food_id]
            print(f"üçõ searching for food_id: {food_id}, found rows: {len(food)}")

            if not food.empty:
                # ‡πÉ‡∏ä‡πâ .iloc[0] ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å ‡πÅ‡∏•‡∏∞ [column_name] ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
                food_row = food.iloc[0]
                result.append({
                    'id': int(food_id),
                    'name': food_row['name'],
                    'category': food_row['category'],
                    'spicy_level': int(food_row['spicy_level']),
                    'price': int(food_row['price'])
                })
            else:
                print(f"‚ö†Ô∏è No food found with ID: {food_id}")

        print(f"üî´ Result: {result}")
        return result
    def get_random_foods(self, n):
        """‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£ n ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"""
        random_foods = self.foods_df.sample(n)
        result = []
        for _, food in random_foods.iterrows():
            result.append({
                'id': int(food['food_id']),
                'name': food['name'],
                'category': food['category'],
                'spicy_level': int(food['spicy_level']),
                'price': int(food['price']),
                'meal_time': food['meal_time']
            })
        return result

    def add_rating(self, user_id, food_id, rating):
        print(f"üìù Adding or updating rating for user {user_id}, food {food_id} with score {rating}...")
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô"""
        existing = self.ratings_df[
            (self.ratings_df['user_id'] == user_id) &
            (self.ratings_df['food_id'] == food_id)
            ]

        if len(existing) > 0:
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
            self.ratings_df.loc[
                (self.ratings_df['user_id'] == user_id) &
                (self.ratings_df['food_id'] == food_id),
                'rating'
            ] = rating
        else:
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏´‡∏°‡πà
            new_rating = pd.DataFrame([{
                'user_id': user_id,
                'food_id': food_id,
                'rating': rating
            }])
            self.ratings_df = pd.concat([self.ratings_df, new_rating], ignore_index=True)
        return True

    def get_foods_by_meal(self, meal_time):
        """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ food_id ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏"""
        # ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö substring ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ ,
        meal_foods = self.foods_df[self.foods_df['meal_time'].str.contains(meal_time)]
        return meal_foods['food_id'].values

    def get_random_foods_by_meal(self, meal_time, n):
        """‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£ n ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏°‡∏∑‡πâ‡∏≠"""
        # ‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏°‡∏∑‡πâ‡∏≠‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        meal_foods = self.foods_df[self.foods_df['meal_time'].str.contains(meal_time)]

        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏ô‡∏°‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        if len(meal_foods) == 0:
            return self.get_random_foods(n)

        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ
        if len(meal_foods) < n:
            n = len(meal_foods)

        random_foods = meal_foods.sample(n)
        result = []
        for _, food in random_foods.iterrows():
            result.append({
                'id': int(food['food_id']),
                'name': food['name'],
                'category': food['category'],
                'spicy_level': int(food['spicy_level']),
                'price': int(food['price']),
                'meal_time': food['meal_time']  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            })
        return result
